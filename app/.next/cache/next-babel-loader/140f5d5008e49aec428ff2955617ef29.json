{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\nimport Head from 'next/head';\nimport React, { Component } from 'react';\nimport ReactTable from \"react-table\";\nimport styled from 'styled-components';\nimport \"react-table/react-table.css\";\nimport window from 'global';\nimport MonthPickerInput from 'react-month-picker-input';\nimport Loader from \"./loader\"; //import 'react-month-picker-input/dist/react-month-picker-input.css';\n//var MonthPickerInput = require('react-month-picker-input');\n\nrequire('react-month-picker-input/dist/react-month-picker-input.css');\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nconst useStyles = makeStyles(theme => ({\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 120\n  },\n  selectEmpty: {\n    marginTop: theme.spacing(2)\n  }\n}));\nconst classes = useStyles;\nconst liff = window.liff;\nconst BOX = styled.div`\n  margin: 5.5em auto;\n`;\nvar leaves;\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"handleChange\", event => {\n      try {\n        this.setState({\n          searchInput: event\n        }, () => {\n          this.globalSearch();\n        });\n      } catch (err) {\n        next(err);\n      }\n    });\n\n    _defineProperty(this, \"globalSearch\", () => {\n      try {\n        let {\n          searchInput\n        } = this.state;\n        var date_array = searchInput.split(\"/\");\n        var date_select = new Date(date_array[1], date_array[0]);\n        var year_select = date_select.getFullYear();\n        var month_select = date_select.getMonth();\n        let filteredData = this.state.data_origin.filter(value => {\n          var date = new Date(value.startDate);\n          var year = date.getFullYear();\n          var month = date.getMonth() + 1;\n          return year === year_select && month === month_select;\n        });\n        this.setState({\n          data: filteredData,\n          loading: false\n        });\n      } catch (err) {\n        next(err);\n      }\n    });\n\n    this.state = {\n      data: null\n    };\n  }\n\n  componentDidMount() {\n    this.liffInit();\n  }\n\n  liffInit() {\n    try {\n      liff.init(data => {\n        const userId = data.context.userId;\n        const accessToken = liff.getAccessToken();\n        const URL_CHECKEXIST = \"https://us-central1-teddybear-dev.cloudfunctions.net/api/staff/checkExist\";\n        const body = {\n          userId: userId\n        };\n        fetch(URL_CHECKEXIST, {\n          method: 'post',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: _JSON$stringify(body)\n        }).then(res => {\n          return res.text();\n        }).then(result => {\n          if (result) {\n            this.lineAuth(userId, accessToken);\n          } else {\n            alert(\"請登入以查看假單\");\n            window.location.replace(\"https://teddybear-dev.firebaseapp.com/signIn\");\n          }\n        });\n      }, err => {\n        alert(\"error\");\n      });\n    } catch (err) {\n      next(err);\n    }\n  }\n\n  lineAuth(userId, accessToken) {\n    try {\n      const url = \"https://us-central1-teddybear-dev.cloudfunctions.net/api/staff/lineAuth\";\n      const body = {\n        userId: userId,\n        accessToken: accessToken\n      };\n      fetch(url, {\n        method: 'post',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: _JSON$stringify(body)\n      }).then(res => {\n        return res.json();\n      }).then(result => {\n        if (result) {\n          const ubn = result.staff.ubn;\n          const email = result.staff.email;\n          const idToken = result.token.idToken;\n          this.getLeaves(ubn, email, idToken);\n        } else {\n          alert(\"lineAuth no result\");\n        }\n      }).catch(function (error) {\n        alert(error.message);\n      });\n    } catch (err) {\n      next(err);\n    }\n  }\n\n  getLeavesSub(ubn, name, email, idToken) {\n    try {\n      const URL_GETLEAVES = \"https://us-central1-teddybear-dev.cloudfunctions.net/api/leave/get\";\n      const url = URL_GETLEAVES + `?ubn=${ubn}&query=substitute&value={\"name\":\"${name}\",\"email\":\"${email}\"}`;\n      const header = {\n        Authorization: idToken\n      };\n      fetch(url, {\n        method: 'get',\n        headers: header\n      }).then(res => {\n        return res.json();\n      }).then(result => {\n        if (result) {\n          this.convertData(result.list);\n        } else {\n          alert(\"getLeaves no result\");\n        }\n      }).catch(function (error) {\n        alert(error.message);\n      });\n    } catch (err) {\n      next(err);\n    }\n  }\n\n  getLeavesSuper(ubn, email, idToken) {\n    try {\n      const URL_GETLEAVES = \"https://us-central1-teddybear-dev.cloudfunctions.net/api/leave/get\";\n      const url = URL_GETLEAVES + `?ubn=${ubn}&query=supervisor&value=${email}`;\n      const header = {\n        Authorization: idToken\n      };\n      fetch(url, {\n        method: 'get',\n        headers: header\n      }).then(res => {\n        return res.json();\n      }).then(result => {\n        if (result) {\n          this.convertData(result.list);\n        } else {\n          alert(\"getLeaves no result\");\n        }\n      }).catch(function (error) {\n        alert(error.message);\n      });\n    } catch (err) {\n      next(err);\n    }\n  }\n\n  convertData(list) {\n    try {\n      var newList = [];\n\n      for (var i = 0; i < list.length; i++) {\n        const data = {\n          \"startDate\": list[i].startDate,\n          \"endDate\": list[i].endDate,\n          \"leaveType\": list[i].leaveType,\n          \"substitute\": JSON.parse(list[i].substitute).name,\n          \"status\": list[i].status,\n          \"leaveReason\": list[i].leaveReason,\n          \"rejectReason\": list[i].rejectReason\n        };\n        newList.push(data);\n      }\n\n      this.setState({\n        data: newList,\n        data_origin: newList\n      });\n    } catch (err) {\n      next(err);\n    }\n  }\n\n  render() {\n    const MyLoader = () => __jsx(Loader, {\n      loading: this.state.loading\n    });\n\n    let months = ['Jan', 'Feb', 'Mar', 'Spr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n\n    let makeText = m => {\n      if (m && m.year && m.month) return months[m.month - 1] + '. ' + m.year;\n      return '?';\n    };\n\n    let mvalue = {\n      year: 2015,\n      month: 11\n    };\n    const columns = [{\n      Header: '開始日期',\n      accessor: 'startDate',\n      id: \"startDate\"\n    }, {\n      Header: '結束日期',\n      accessor: 'endDate'\n    }, {\n      Header: '假勤類別',\n      accessor: 'leaveType'\n    }, {\n      Header: '代理人',\n      accessor: 'substitute'\n    }, {\n      Header: '簽核狀態',\n      accessor: 'status'\n    }, {\n      Header: '請假原因',\n      accessor: 'leaveReason',\n      show: false\n    }, {\n      Header: '拒絕原因',\n      accessor: 'rejectReason',\n      show: false\n    }];\n    return __jsx(\"div\", null, __jsx(Head, null, __jsx(\"script\", {\n      src: \"https://d.line-scdn.net/liff/1.0/sdk.js\"\n    })), __jsx(\"p\", null, \"\\u5E74/\\u6708\"), __jsx(MonthPickerInput, {\n      onChange: this.handleChange\n    }), __jsx(FormControl, null, __jsx(InputLabel, {\n      id: \"demo-simple-select-label\"\n    }, \"Role\"), __jsx(Select, {\n      labelId: \"demo-simple-select-label\",\n      id: \"demo-simple-select\",\n      value: this.state.searchInput,\n      onChange: this.handleChange\n    }, __jsx(MenuItem, {\n      value: \"substitute\"\n    }, \"\\u4EE3\\u7406\\u4EBA\"), __jsx(MenuItem, {\n      value: \"supervisor\"\n    }, \"\\u4E3B\\u7BA1\"))), __jsx(\"br\", null), __jsx(\"div\", null, this.state.data ? __jsx(ReactTable, {\n      data: this.state.data,\n      getTrProps: (state, rowInfo, column, instance) => ({\n        onClick: e => alert(`開始日期：${rowInfo.row.startDate}\\n結束日期：${rowInfo.row.endDate}\\n假勤類別：${rowInfo.row.leaveType}\\n代理人：${rowInfo.row.substitute}\\n簽核狀態：${rowInfo.row.status}\\n拒絕原因：${rowInfo.row.rejectReason}`)\n      }),\n      columns: columns,\n      defaultPageSize: 10,\n      pageSizeOptions: [10, 15]\n    }) : __jsx(ReactTable, {\n      LoadingComponent: MyLoader,\n      data: leaves,\n      columns: columns,\n      defaultPageSize: 10,\n      pageSizeOptions: [10, 15]\n    })));\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}