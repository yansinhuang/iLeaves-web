{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nvar __jsx = React.createElement;\n// Render Prop\nimport React, { Component, useState } from 'react';\nimport styled from 'styled-components';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport { TextField } from 'formik-material-ui';\nimport fetch from 'isomorphic-unfetch';\nimport Button from \"@material-ui/core/Button\";\nimport Box from \"@material-ui/core/Box\";\nimport Head from 'next/head';\nimport window from 'global';\nimport { Select } from 'material-ui-formik-components/Select';\nimport { DatePicker, MuiPickersUtilsProvider } from '@material-ui/pickers';\nimport LuxonUtils from '@date-io/luxon';\nimport Loader from 'react-loader-spinner';\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\n\nrequire(\"react-datepicker/dist/react-datepicker.css\");\n\nvar dateFormat = require('dateformat');\n\nconst liff = window.liff;\nconst BOX = styled.div`\n  margin: 5.5em auto;\n  width:100%;\n  height:40vh;\n  display:flex;\n  align-items:center;\n  justify-content:center;\n`;\nconst LOADERBOX = styled.div`\n  display: table;\n  margin: 0 auto;\n\n`;\nconst TITLE = styled.h2`\n  color: #F8F9F9;\n  font-family: Candara;\n  text-align: center;\n  margin-bottom:-2em;\n`;\nconst CONTAINER = styled.div`\n  background: #F7F9FA;\n  height: 70vh;\n  width: 80vw;\n  margin: 5em auto;\n  display:flex;\n  align-items:center;\n  justify-content:center;\n  box-shadow: 5px 5px 5px 0px rgba(0, 0, 0, 0.4);\n\n  label {\n    font-family: Candara;\n    color: #1C2833;\n    font-size: 1.2em;\n    font-weight: 400;\n  }\n`;\nconst MYFORM = styled(Form)`\n  text-align: center;\n  padding-top: 2em;\n  padding-bottom: 2em;\n`;\nconst FIELD = styled(Field)`\n  width: 70vw;\n  margin: auto;\n`;\nconst BUTTON = styled(Button)`\n  width: 70vw;\n  variant: contained;\n`;\nconst TomatoButton = styled.button`\n  color: tomato;\n  border-color: tomato;\n  width: 80%;\n`;\n\nconst liffInit = () => {\n  try {\n    liff.init(data => {\n      const userId = data.context.userId; //const accessToken = liff.getAccessToken();\n\n      const URL_CHECKEXIST = \"https://us-central1-teddybear-dev.cloudfunctions.net/api/staff/checkExist\";\n      const body = {\n        userId: userId\n      };\n      fetch(URL_CHECKEXIST, {\n        method: 'post',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: _JSON$stringify(body)\n      }).then(res => {\n        return res.text();\n      }).then(result => {});\n    }, err => {\n      alert(err.message);\n    });\n  } catch (err) {\n    //next(err);\n    alert(err);\n  }\n};\n\nconst useCurrentLocation = (options = {}) => {\n  // ...\n  // Success handler for geolocation's `getCurrentPosition` method\n  const handleSuccess = position => {\n    const {\n      latitude,\n      longitude\n    } = position.coords;\n    setLocation({\n      latitude,\n      longitude\n    });\n  }; // Error handler for geolocation's `getCurrentPosition` method\n\n\n  const handleError = error => {\n    setError(error.message);\n  };\n\n  useEffect(() => {\n    // ...\n    // Call the Geolocation API with options\n    navigator.geolocation.getCurrentPosition(handleSuccess, handleError, options); // ...\n    // Add options parameter to the dependency list\n  }, [options]); // ...\n};\n\nconst geolocationOptions = {\n  // Using this option you can define when should the location request timeout and\n  // call the error callback with timeout message.\n  timeout: 1000 * 60 * 1 // 1 min (1000 ms * 60 sec * 1 minute = 60 000ms)\n\n};\nliffInit();\n\nfunction App() {\n  const {\n    location,\n    error\n  } = useCurrentLocation(geolocationOptions);\n  return __jsx(BOX, null, __jsx(Head, null, __jsx(\"script\", {\n    src: \"https://d.line-scdn.net/liff/1.0/sdk.js\"\n  })), __jsx(\"body\", {\n    style: {\n      background: '#34495E'\n    }\n  }, __jsx(BOX, null, __jsx(\"h1\", null, \"HTML Geolocation API with React Hooks example\"), \";\", location ? __jsx(\"code\", null, \"Latitude: \", location.latitude, \", Longitude: \", location.longitude) : __jsx(\"p\", null, \"Loading...\"), error && __jsx(\"p\", null, \"Location Error: \", error))));\n}\n\nexport default App;","map":null,"metadata":{},"sourceType":"module"}