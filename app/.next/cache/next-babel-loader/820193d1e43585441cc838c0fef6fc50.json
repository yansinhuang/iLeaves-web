{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\nimport Head from 'next/head';\nimport React, { Component } from 'react';\nimport ReactTable from \"react-table\";\nimport styled from 'styled-components';\nimport \"react-table/react-table.css\";\nimport window from 'global';\nimport Loader from \"./loader\";\nimport Button from \"@material-ui/core/Button\";\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nrequire('react-month-picker-input/dist/react-month-picker-input.css');\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport Grid from '@material-ui/core/Grid';\nconst useStyles = makeStyles(theme => ({\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 120,\n    fullWidth: true\n  },\n  selectEmpty: {\n    marginTop: theme.spacing(2)\n  }\n}));\nconst BUTTON = styled(Button)`\n  width: 20%;\n  variant: contained;\n  background-color: #1DB954;\n`;\nconst liff = window.liff;\nvar leaves;\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"handleRoleChange\", event => {\n      try {\n        this.setState({\n          role: event.target.value\n        }, () => {\n          if (event.target.value == \"substitute\") {\n            this.getLeavesSub(this.state.ubn, this.state.name, this.state.email, this.state.idToken);\n          } else if (event.target.value == \"supervisor\") {\n            this.getLeavesSuper(this.state.ubn, this.state.email, this.state.idToken);\n          }\n        });\n      } catch (err) {\n        throw err;\n      }\n    });\n\n    _defineProperty(this, \"handleStatusChange\", event => {\n      try {\n        this.setState({\n          status: event.target.value\n        }, () => {\n          //console.log(event.target.value);\n          this.globalSearch();\n        });\n      } catch (err) {\n        throw err;\n      }\n    });\n\n    _defineProperty(this, \"globalSearch\", () => {\n      try {\n        this.setState({\n          loading: true\n        });\n        let role_select = this.state.role;\n        let status_select = this.state.status;\n        let filteredData = this.state.data_origin.filter(value => {\n          if (role_select == \"substitute\") {\n            switch (status_select) {\n              case \"signed\":\n                return value.status != \"等待簽核\";\n\n              case \"not signed\":\n                return value.status == \"等待簽核\";\n\n              default:\n                throw 'Option not supported';\n            }\n          } else if (role_select == \"supervisor\") {\n            switch (status_select) {\n              case \"signed\":\n                return value.status == \"同意 (主管)\" || value.status == \"拒絕 (主管)\";\n\n              case \"not signed\":\n                return value.status == \"同意 (代理人)\";\n\n              default:\n                throw 'Option not supported';\n            }\n          }\n        });\n        this.setState({\n          data: filteredData,\n          loading: false\n        });\n      } catch (err) {\n        throw err;\n      }\n    });\n\n    this.state = {\n      data: null,\n      data_origin: null,\n      role: \"substitute\",\n      status: \"not signed\",\n      loading: true,\n      userId: null,\n      ubn: null,\n      idToken: null,\n      loading_button: new Object(),\n      finish_button: new Object(),\n      status_button: new Object()\n    };\n  }\n\n  componentDidMount() {\n    this.liffInit();\n  }\n\n  liffInit() {\n    try {\n      liff.init(data => {\n        const userId = data.context.userId;\n        this.setState({\n          userId: userId\n        });\n        const accessToken = liff.getAccessToken();\n        const URL_CHECKEXIST = \"https://us-central1-teddybear-dev.cloudfunctions.net/api/staff/checkExist\";\n        const body = {\n          userId: userId\n        };\n        fetch(URL_CHECKEXIST, {\n          method: 'post',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: _JSON$stringify(body)\n        }).then(res => {\n          return res.text();\n        }).then(result => {\n          if (result) {\n            this.lineAuth(userId, accessToken);\n          } else {\n            alert(\"請登入以查看假單\");\n            window.location.replace(\"https://teddybear-dev.firebaseapp.com/signIn\");\n          }\n        });\n      }, err => {\n        alert(\"error\");\n      });\n    } catch (err) {\n      throw err;\n    }\n  }\n\n  lineAuth(userId, accessToken) {\n    try {\n      const url = \"https://us-central1-teddybear-dev.cloudfunctions.net/api/staff/lineAuth\";\n      const body = {\n        userId: userId,\n        accessToken: accessToken\n      };\n      fetch(url, {\n        method: 'post',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: _JSON$stringify(body)\n      }).then(res => {\n        return res.json();\n      }).then(result => {\n        if (result) {\n          const ubn = result.staff.ubn;\n          const email = result.staff.email;\n          const name = result.staff.name;\n          const idToken = result.token.idToken;\n          this.setState({\n            ubn: ubn,\n            name: name,\n            email: email,\n            idToken: idToken\n          });\n\n          if (this.state.role == \"substitute\") {\n            this.getLeavesSub(this.state.ubn, this.state.name, this.state.email, this.state.idToken);\n          } else if (this.state.role == \"supervisor\") {\n            this.getLeavesSuper(this.state.ubn, this.state.email, this.state.idToken);\n          }\n        } else {\n          alert(\"lineAuth no result\");\n        }\n      }).catch(function (error) {\n        alert(error.message);\n      });\n    } catch (err) {\n      throw err;\n    }\n  }\n\n  getLeavesSub(ubn, name, email, idToken) {\n    try {\n      this.setState({\n        loading: true\n      });\n      const URL_GETLEAVES = \"https://us-central1-teddybear-dev.cloudfunctions.net/api/leave/get\";\n      const url = URL_GETLEAVES + `?ubn=${ubn}&query=substitute&value={\"name\":\"${name}\",\"email\":\"${email}\"}`;\n      const header = {\n        Authorization: idToken\n      };\n      fetch(url, {\n        method: 'get',\n        headers: header\n      }).then(res => {\n        return res.json();\n      }).then(result => {\n        if (result) {\n          this.convertData(result.list);\n        } else {\n          alert(\"getLeavesSub no result\");\n        }\n      }).catch(function (error) {\n        alert(error.message);\n      });\n    } catch (err) {\n      throw err;\n    }\n  }\n\n  getLeavesSuper(ubn, email, idToken) {\n    try {\n      this.setState({\n        loading: true\n      });\n      const URL_GETLEAVES = \"https://us-central1-teddybear-dev.cloudfunctions.net/api/leave/get\";\n      const url = URL_GETLEAVES + `?ubn=${ubn}&query=supervisor&value=${email}`;\n      const header = {\n        Authorization: idToken\n      };\n      fetch(url, {\n        method: 'get',\n        headers: header\n      }).then(res => {\n        return res.json();\n      }).then(result => {\n        if (result) {\n          this.convertData(result.list);\n        } else {\n          alert(\"getLeavesSuper no result\");\n        }\n      }).catch(function (error) {\n        alert(error.message);\n      });\n    } catch (err) {\n      throw err;\n    }\n  }\n\n  convertData(list) {\n    try {\n      var newList = [];\n\n      for (var i = 0; i < list.length; i++) {\n        const data = {\n          \"id\": list[i].id,\n          \"name\": list[i].name,\n          \"startDate\": list[i].startDate,\n          \"endDate\": list[i].endDate,\n          \"leaveType\": list[i].leaveType,\n          \"substitute\": JSON.parse(list[i].substitute).name,\n          \"status\": list[i].status,\n          \"leaveReason\": list[i].leaveReason,\n          \"rejectReason\": list[i].rejectReason\n        };\n        newList.push(data);\n      }\n\n      this.setState({\n        data_origin: newList\n      });\n      this.globalSearch();\n    } catch (err) {\n      throw err;\n    }\n  }\n\n  approveLeave(Authorization, ubn, leaveId, role) {\n    try {\n      if (role == \"substitute\") {\n        const URL_APPROVELEAVESUB = \"https://us-central1-teddybear-dev.cloudfunctions.net/api/message/approveLeaveSub\";\n        const body = {\n          ubn: ubn,\n          leaveId: leaveId\n        };\n        fetch(URL_APPROVELEAVESUB, {\n          method: 'post',\n          headers: {\n            \"Authorization\": Authorization,\n            \"Content-Type\": \"application/json\"\n          },\n          body: _JSON$stringify(body)\n        }).then(res => {\n          if (res.ok) {\n            let loading = this.state.loading_button;\n            let finish = this.state.finish_button;\n            loading[leaveId] = false;\n            finish[leaveId] = true;\n            this.setState({\n              loading_button: loading,\n              finish_button: finish\n            });\n            this.getLeavesSub(this.state.ubn, this.state.name, this.state.email, this.state.idToken);\n          }\n\n          return res.json();\n        }).then(result => {\n          if (result) {} else {\n            alert(\"approveLeave error\");\n          }\n        });\n      } else if (role == \"supervisor\") {\n        const URL_APPROVELEAVESUPER = \"https://us-central1-teddybear-dev.cloudfunctions.net/api/message/approveLeaveSuper\";\n        const body = {\n          ubn: ubn,\n          leaveId: leaveId\n        };\n        fetch(URL_APPROVELEAVESUPER, {\n          method: 'post',\n          headers: {\n            \"Authorization\": Authorization,\n            \"Content-Type\": \"application/json\"\n          },\n          body: _JSON$stringify(body)\n        }).then(res => {\n          if (res.ok) {\n            let loading = this.state.loading_button;\n            let finish = this.state.finish_button;\n            loading[leaveId] = false;\n            finish[leaveId] = true;\n            this.setState({\n              loading_button: loading,\n              finish_button: finish\n            });\n            this.getLeavesSuper(this.state.ubn, this.state.email, this.state.idToken);\n          }\n\n          return res.json();\n        }).then(result => {\n          if (result) {} else {\n            alert(\"approveLeave error\");\n          }\n        });\n      }\n    } catch (err) {\n      next(err);\n    }\n  }\n\n  updateLeave(Authorization, ubn, leaveId, role, rejectReason) {\n    try {\n      const URL_UPDATELEAVE = \"https://us-central1-teddybear-dev.cloudfunctions.net/api/leave/update\";\n      var values = {\n        ubn: ubn,\n        leaveId: leaveId,\n        rejectReason: rejectReason\n      };\n\n      if (role == \"substitute\") {\n        values.status = \"拒絕 (代理人)\";\n      } else if (role == \"supervisor\") {\n        values.status = \"拒絕 (主管)\";\n      }\n\n      fetch(URL_UPDATELEAVE, {\n        method: 'post',\n        headers: {\n          \"Authorization\": Authorization,\n          \"Content-Type\": \"application/json\"\n        },\n        body: _JSON$stringify(values)\n      }).then(res => {\n        if (res.ok) {\n          let loading = this.state.loading_button;\n          let finish = this.state.finish_button;\n          loading[leaveId] = false;\n          finish[leaveId] = true;\n          this.setState({\n            loading_button: loading,\n            finish_button: finish\n          });\n\n          if (role == \"substitute\") {\n            this.getLeavesSub(this.state.ubn, this.state.name, this.state.email, this.state.idToken);\n          } else if (role == \"supervisor\") {\n            this.getLeavesSuper(this.state.ubn, this.state.email, this.state.idToken);\n          }\n\n          return res.json();\n        }\n\n        throw new Error('updateLeave response was not ok.');\n      }).then(result => {\n        const substituteInfo = JSON.parse(result.substitute);\n        const messages_self = {\n          \"type\": \"flex\",\n          \"altText\": \"代理人已拒絕假單\",\n          \"contents\": {\n            \"type\": \"bubble\",\n            \"styles\": {},\n            \"body\": {\n              \"type\": \"box\",\n              \"layout\": \"vertical\",\n              \"contents\": [{\n                \"type\": \"text\",\n                \"text\": \"代理人\",\n                \"weight\": \"bold\",\n                \"color\": \"#1DB446\",\n                \"size\": \"sm\"\n              }, {\n                \"type\": \"text\",\n                \"text\": \"已拒絕假單\",\n                \"weight\": \"bold\",\n                \"size\": \"xxl\",\n                \"margin\": \"md\"\n              }, {\n                \"type\": \"separator\",\n                \"margin\": \"xxl\"\n              }, {\n                \"type\": \"box\",\n                \"layout\": \"vertical\",\n                \"margin\": \"xxl\",\n                \"spacing\": \"sm\",\n                \"contents\": [{\n                  \"type\": \"box\",\n                  \"layout\": \"horizontal\",\n                  \"contents\": [{\n                    \"type\": \"text\",\n                    \"text\": \"開始日期\",\n                    \"size\": \"sm\",\n                    \"color\": \"#555555\"\n                  }, {\n                    \"type\": \"text\",\n                    \"text\": result.startDate,\n                    \"size\": \"sm\",\n                    \"color\": \"#111111\",\n                    \"align\": \"end\"\n                  }]\n                }, {\n                  \"type\": \"box\",\n                  \"layout\": \"horizontal\",\n                  \"contents\": [{\n                    \"type\": \"text\",\n                    \"text\": \"結束日期\",\n                    \"size\": \"sm\",\n                    \"color\": \"#555555\"\n                  }, {\n                    \"type\": \"text\",\n                    \"text\": result.endDate,\n                    \"size\": \"sm\",\n                    \"color\": \"#111111\",\n                    \"align\": \"end\"\n                  }]\n                }, {\n                  \"type\": \"separator\",\n                  \"margin\": \"xxl\"\n                }, {\n                  \"type\": \"box\",\n                  \"layout\": \"horizontal\",\n                  \"margin\": \"xxl\",\n                  \"contents\": [{\n                    \"type\": \"text\",\n                    \"text\": \"假別\",\n                    \"size\": \"sm\",\n                    \"color\": \"#555555\"\n                  }, {\n                    \"type\": \"text\",\n                    \"text\": result.leaveType,\n                    \"size\": \"sm\",\n                    \"color\": \"#111111\",\n                    \"align\": \"end\"\n                  }]\n                }, {\n                  \"type\": \"box\",\n                  \"layout\": \"horizontal\",\n                  \"contents\": [{\n                    \"type\": \"text\",\n                    \"text\": \"請假原因\",\n                    \"size\": \"sm\",\n                    \"color\": \"#555555\"\n                  }, {\n                    \"type\": \"text\",\n                    \"text\": result.leaveReason,\n                    \"size\": \"sm\",\n                    \"color\": \"#111111\",\n                    \"align\": \"end\"\n                  }]\n                }, {\n                  \"type\": \"box\",\n                  \"layout\": \"horizontal\",\n                  \"contents\": [{\n                    \"type\": \"text\",\n                    \"text\": \"代理人\",\n                    \"size\": \"sm\",\n                    \"color\": \"#555555\"\n                  }, {\n                    \"type\": \"text\",\n                    \"text\": substituteInfo.name,\n                    \"size\": \"sm\",\n                    \"color\": \"#111111\",\n                    \"align\": \"end\"\n                  }]\n                }]\n              }, {\n                \"type\": \"separator\",\n                \"margin\": \"xxl\"\n              }, {\n                \"type\": \"box\",\n                \"layout\": \"horizontal\",\n                \"margin\": \"md\",\n                \"contents\": [{\n                  \"type\": \"text\",\n                  \"text\": \"簽核狀態\",\n                  \"size\": \"xs\",\n                  \"color\": \"#555555\"\n                }, {\n                  \"type\": \"text\",\n                  \"text\": \"拒絕(代理人)\",\n                  \"color\": \"#ff0000\",\n                  \"size\": \"xs\",\n                  \"align\": \"end\"\n                }]\n              }, {\n                \"type\": \"box\",\n                \"layout\": \"horizontal\",\n                \"margin\": \"md\",\n                \"contents\": [{\n                  \"type\": \"text\",\n                  \"text\": \"拒絕原因\",\n                  \"size\": \"xs\",\n                  \"color\": \"#555555\"\n                }, {\n                  \"type\": \"text\",\n                  \"text\": result.rejectReason,\n                  \"color\": \"#111111\",\n                  \"size\": \"xs\",\n                  \"align\": \"end\"\n                }]\n              }]\n            }\n          }\n        };\n        ;\n        this.getStaff(Authorization, ubn, result.email, messages_self); //this.pushMessage(this.state.userId_self, [messages_self]);\n      }).catch(function (error) {\n        alert(error.message);\n      });\n    } catch (err) {\n      next(err);\n    }\n  }\n\n  getStaff(Authorization, ubn, email, messages) {\n    try {\n      const URL_GETSTAFF = `https://us-central1-teddybear-dev.cloudfunctions.net/api/staff/target?email=${email}&ubn=${ubn}`;\n      fetch(URL_GETSTAFF, {\n        method: 'get',\n        headers: {\n          \"Authorization\": Authorization\n        }\n      }).then(res => {\n        if (res.ok) {\n          return res.json();\n        }\n\n        throw new Error('getStaff response was not ok.');\n      }).then(result => {\n        this.pushMessage(result.userId, [messages]);\n      });\n    } catch (err) {\n      next(err);\n    }\n  }\n\n  pushMessage(userId, messages) {\n    try {\n      const URL_PUSHMESSAGE = \"https://us-central1-teddybear-dev.cloudfunctions.net/api/message/pushMessage\";\n      const body = {\n        userId: userId,\n        messages: messages\n      };\n      fetch(URL_PUSHMESSAGE, {\n        method: 'post',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: _JSON$stringify(body)\n      }).then(res => {\n        if (res.ok) {\n          return res.json();\n        }\n\n        throw new Error('pushMessage response was not ok.');\n      });\n    } catch (err) {\n      next(err);\n    }\n  }\n\n  render() {\n    const MyLoader = () => __jsx(Loader, {\n      loading: this.state.loading\n    });\n\n    const columns = [{\n      Header: 'id',\n      accessor: 'id',\n      show: false\n    }, {\n      Header: '請假者',\n      accessor: 'name',\n      width: 90\n    }, {\n      Header: '開始日期',\n      accessor: 'startDate',\n      width: 90\n    }, {\n      Header: '結束日期',\n      accessor: 'endDate',\n      width: 90\n    }, {\n      Header: '假勤類別',\n      accessor: 'leaveType',\n      show: false\n    }, {\n      Header: '代理人',\n      accessor: 'substitute',\n      show: false\n    }, {\n      Header: '簽核狀態',\n      accessor: 'status',\n      width: 90\n    }, {\n      Header: '請假原因',\n      accessor: 'leaveReason',\n      show: false\n    }, {\n      Header: '拒絕原因',\n      accessor: 'rejectReason',\n      show: false\n    }];\n    return __jsx(\"div\", null, __jsx(Head, null, __jsx(\"script\", {\n      src: \"https://d.line-scdn.net/liff/1.0/sdk.js\"\n    })), __jsx(Grid, {\n      container: true,\n      spacing: 1\n    }, __jsx(Grid, {\n      item: true,\n      xs: 12\n    }, __jsx(Grid, {\n      container: true,\n      justify: \"center\",\n      spacing: 3\n    }, __jsx(Grid, {\n      key: 1,\n      item: true\n    }, __jsx(FormControl, {\n      margin: \"normal\",\n      style: {\n        minWidth: 150\n      }\n    }, __jsx(InputLabel, {\n      id: \"role-label\"\n    }, \"\\u7C3D\\u6838\\u8EAB\\u4EFD\"), __jsx(Select, {\n      labelId: \"role-label\",\n      id: \"role\",\n      value: this.state.role,\n      onChange: this.handleRoleChange\n    }, __jsx(MenuItem, {\n      value: \"substitute\"\n    }, \"\\u4EE3\\u7406\\u4EBA\"), __jsx(MenuItem, {\n      value: \"supervisor\"\n    }, \"\\u4E3B\\u7BA1\")))), __jsx(Grid, {\n      key: 2,\n      item: true\n    }, __jsx(FormControl, {\n      margin: \"normal\",\n      style: {\n        minWidth: 150\n      }\n    }, __jsx(InputLabel, {\n      id: \"status-label\"\n    }, \"\\u7C3D\\u6838\\u72C0\\u614B\"), __jsx(Select, {\n      labelId: \"status-label\",\n      id: \"status\",\n      value: this.state.status,\n      onChange: this.handleStatusChange\n    }, __jsx(MenuItem, {\n      value: \"not signed\"\n    }, \"\\u672A\\u7C3D\\u6838\"), __jsx(MenuItem, {\n      value: \"signed\"\n    }, \"\\u5DF2\\u7C3D\\u6838\")))), __jsx(Grid, {\n      key: 3,\n      item: true\n    }, __jsx(\"div\", null, this.state.data ? __jsx(ReactTable, {\n      LoadingComponent: MyLoader,\n      data: this.state.data,\n      columns: columns,\n      className: \"-striped -highlight\",\n      SubComponent: row => {\n        //row.loading = false;\n        //this.state.loading_button[row.original.id] = false;\n        //alert(row.original.status);\n        return __jsx(\"div\", {\n          style: {\n            \"padding-left\": \"30px\",\n            \"padding-right\": \"30px\",\n            \"padding-top\": \"10px\",\n            \"padding-bottom\": \"10px\",\n            display: \"flex\",\n            \"align-items\": \"center\"\n          }\n        }, __jsx(\"div\", {\n          style: {\n            display: \"inline-block\",\n            \"margin-right\": \"2vw\"\n          }\n        }, row.original.rejectReason ? __jsx(\"div\", {\n          style: {\n            display: \"table-cell\",\n            \"vertical-align\": \"middle\"\n          }\n        }, __jsx(\"div\", null, \"\\u5047\\u52E4\\u985E\\u5225\\uFF1A\", row.original.leaveType), __jsx(\"div\", null, \"\\u8ACB\\u5047\\u539F\\u56E0\\uFF1A\", row.original.leaveReason), __jsx(\"div\", null, \"\\u4EE3\\u7406\\u4EBA\\uFF1A\", row.original.substitute), __jsx(\"div\", null, \"\\u62D2\\u7D55\\u539F\\u56E0\\uFF1A\", row.original.rejectReason)) : __jsx(\"div\", {\n          style: {\n            display: \"table-cell\",\n            \"vertical-align\": \"middle\"\n          }\n        }, __jsx(\"div\", null, \"\\u5047\\u52E4\\u985E\\u5225\\uFF1A\", row.original.leaveType), __jsx(\"div\", null, \"\\u8ACB\\u5047\\u539F\\u56E0\\uFF1A\", row.original.leaveReason), __jsx(\"div\", null, \"\\u4EE3\\u7406\\u4EBA\\uFF1A\", row.original.substitute))), __jsx(\"div\", {\n          style: {\n            display: \"inline-block\",\n            float: \"right\"\n          }\n        }, this.state.status == \"not signed\" && !this.state.finish_button[row.original.id] ? __jsx(\"div\", null, __jsx(\"div\", {\n          style: {\n            display: \"inline\",\n            \"margin-right\": \"2vw\"\n          }\n        }, __jsx(BUTTON, {\n          fontFamily: \"Candara\",\n          variant: \"contained\",\n          color: \"secondary\",\n          disabled: this.state.loading_button[row.original.id],\n          onClick: () => {\n            let loading = this.state.loading_button;\n            loading[row.original.id] = true;\n            this.setState({\n              loading_button: loading\n            });\n            this.approveLeave(this.state.idToken, this.state.ubn, row.original.id, this.state.role);\n          }\n        }, this.state.loading_button[row.original.id] && __jsx(CircularProgress, {\n          size: 16\n        }), !this.state.loading_button[row.original.id] && '批准')), __jsx(\"div\", {\n          style: {\n            display: \"inline\"\n          }\n        }, __jsx(BUTTON, {\n          fontFamily: \"Candara\",\n          variant: \"contained\",\n          color: \"secondary\",\n          disabled: this.state.loading_button[row.original.id],\n          onClick: () => {\n            var rejectReason = prompt(\"請輸入拒絕原因\", \"\");\n\n            if (rejectReason != null && rejectReason != \"\") {\n              let loading = this.state.loading_button;\n              loading[row.original.id] = true;\n              this.setState({\n                loading_button: loading\n              });\n              this.updateLeave(this.state.idToken, this.state.ubn, row.original.id, this.state.role, rejectReason);\n              row.original.rejectReason = rejectReason;\n            }\n          }\n        }, this.state.loading_button[row.original.id] && __jsx(CircularProgress, {\n          size: 16\n        }), !this.state.loading_button[row.original.id] && '拒絕'))) : __jsx(\"div\", null)));\n      },\n      defaultPageSize: 10,\n      pageSizeOptions: [10, 15]\n    }) : __jsx(ReactTable, {\n      LoadingComponent: MyLoader,\n      data: leaves,\n      columns: columns,\n      defaultPageSize: 10,\n      pageSizeOptions: [10, 15]\n    })))))));\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}