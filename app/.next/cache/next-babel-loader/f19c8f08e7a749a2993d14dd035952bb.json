{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nvar __jsx = React.createElement;\n// Render Prop\nimport React, { Component } from 'react';\nimport styled from 'styled-components';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport { TextField } from 'formik-material-ui';\nimport fetch from 'isomorphic-unfetch';\nimport Button from \"@material-ui/core/Button\";\nimport Box from \"@material-ui/core/Box\";\nimport Head from 'next/head';\nimport window from 'global';\nimport { Select } from 'material-ui-formik-components/Select';\nimport { DatePicker, MuiPickersUtilsProvider } from '@material-ui/pickers';\nimport LuxonUtils from '@date-io/luxon';\nimport Loader from 'react-loader-spinner';\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\n\nrequire(\"react-datepicker/dist/react-datepicker.css\");\n\nvar dateFormat = require('dateformat');\n\nconst liff = window.liff;\nconst BOX = styled.div`\n  margin: 5.5em auto;\n  width:100%;\n  height:40vh;\n  display:flex;\n  align-items:center;\n  justify-content:center;\n`;\nconst LOADERBOX = styled.div`\n  display: table;\n  margin: 0 auto;\n\n`;\nconst TITLE = styled.h2`\n  color: #F8F9F9;\n  font-family: Candara;\n  text-align: center;\n  margin-bottom:-2em;\n`;\nconst CONTAINER = styled.div`\n  background: #F7F9FA;\n  height: 70vh;\n  width: 80vw;\n  margin: 5em auto;\n  display:flex;\n  align-items:center;\n  justify-content:center;\n  box-shadow: 5px 5px 5px 0px rgba(0, 0, 0, 0.4);\n\n  label {\n    font-family: Candara;\n    color: #1C2833;\n    font-size: 1.2em;\n    font-weight: 400;\n  }\n`;\nconst MYFORM = styled(Form)`\n  text-align: center;\n  padding-top: 2em;\n  padding-bottom: 2em;\n`;\nconst FIELD = styled(Field)`\n  width: 70vw;\n  margin: auto;\n`;\nconst BUTTON = styled(Button)`\n  width: 70vw;\n  variant: contained;\n`;\nconst TomatoButton = styled.button`\n  color: tomato;\n  border-color: tomato;\n  width: 80%;\n`;\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      userId: null,\n      isSubmitting: false,\n      isExist: false\n    };\n  }\n\n  componentDidMount() {\n    this.liffInit();\n  }\n\n  liffInit() {\n    try {\n      liff.init(data => {\n        const userId = data.context.userId; //const accessToken = liff.getAccessToken();\n\n        const URL_CHECKEXIST = \"https://us-central1-teddybear-dev.cloudfunctions.net/api/staff/checkExist\";\n        const body = {\n          userId: userId\n        };\n        fetch(URL_CHECKEXIST, {\n          method: 'post',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: _JSON$stringify(body)\n        }).then(res => {\n          return res.text();\n        }).then(result => {\n          this.setState({\n            userId: userId\n          });\n\n          if (result) {\n            this.setState({\n              isExist: true\n            });\n          }\n        });\n      }, err => {\n        alert(err.message);\n      });\n    } catch (err) {\n      next(err);\n    }\n  }\n\n  signOut(userId) {\n    try {\n      this.setState({\n        isSubmitting: true\n      });\n      const url = \"https://us-central1-teddybear-dev.cloudfunctions.net/api/staff/signOut\";\n      const body = {\n        userId: userId\n      };\n      fetch(url, {\n        method: 'post',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: _JSON$stringify(body)\n      }).then(res => {\n        this.setState({\n          isSubmitting: false\n        });\n        const messages = [{\n          type: \"text\",\n          text: \"登出成功\"\n        }];\n        liff.sendMessages(messages);\n        liff.closeWindow();\n        return res.json();\n      }).catch(function (error) {\n        alert(error.message);\n      });\n    } catch (err) {\n      next(err);\n    }\n  }\n\n  pushMessage(userId, messages) {\n    try {\n      const URL_PUSHMESSAGE = \"https://us-central1-teddybear-dev.cloudfunctions.net/api/message/pushMessage\";\n      const body = {\n        userId: userId,\n        messages: messages\n      };\n      fetch(URL_PUSHMESSAGE, {\n        method: 'post',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: _JSON$stringify(body)\n      }).then(res => {\n        if (res.ok) {\n          return res.json();\n        }\n\n        throw new Error('pushMessage response was not ok.');\n      }).then(result => {//liff.closeWindow();\n      }).catch(function (error) {\n        alert(error.message);\n      });\n    } catch (err) {\n      next(err);\n    }\n  }\n\n  render() {\n    return __jsx(BOX, null, __jsx(Head, null, __jsx(\"script\", {\n      src: \"https://d.line-scdn.net/liff/1.0/sdk.js\"\n    })), __jsx(\"body\", {\n      style: {\n        background: '#34495E'\n      }\n    }, __jsx(BOX, null, this.state.userId ? this.state.isExist ? __jsx(BUTTON, {\n      fontFamily: \"Candara\",\n      variant: \"contained\",\n      color: \"secondary\",\n      disabled: this.state.isSubmitting,\n      onClick: () => {\n        this.signOut(this.state.userId);\n      }\n    }, \"\\u767B\\u51FA\") : __jsx(\"label\", null, \"\\u5DF2\\u767B\\u51FA\") : __jsx(LOADERBOX, null, __jsx(Loader, {\n      type: \"ThreeDots\",\n      color: \"#f50057\",\n      height: 80,\n      width: 80\n    })))));\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}