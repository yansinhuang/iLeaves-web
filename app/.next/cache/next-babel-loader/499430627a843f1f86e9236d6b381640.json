{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nvar __jsx = React.createElement;\n// Render Prop\nimport React, { Component } from 'react';\nimport styled from 'styled-components';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport { TextField } from 'formik-material-ui';\nimport fetch from 'isomorphic-unfetch';\nimport Button from \"@material-ui/core/Button\";\nimport Box from \"@material-ui/core/Box\";\nimport icon from '../components/image/icon.png';\nimport Head from 'next/head';\nimport window from 'global';\nimport DatePicker from \"react-datepicker\";\nimport { Select } from 'material-ui-formik-components/Select';\n\nrequire(\"react-datepicker/dist/react-datepicker.css\");\n\nconst liff = window.liff;\nconst BOX = styled.div`\n  margin: 5.5em auto;\n`;\nconst TITLE = styled.h2`\n  color: #F8F9F9;\n  font-family: Candara;\n  text-align: center;\n  margin-bottom:-2em;\n`;\nconst CONTAINER = styled.div`\n  background: #F7F9FA;\n  height: auto;\n  width: 90%;\n  margin: 5em auto;\n  box-shadow: 5px 5px 5px 0px rgba(0, 0, 0, 0.4);\n\n  label {\n    font-family: Candara;\n    color: #1C2833;\n    font-size: 1.2em;\n    font-weight: 400;\n  }\n`;\nconst MYFORM = styled(Form)`\n  text-align: center;\n  padding-top: 2em;\n  padding-bottom: 2em;\n`;\nconst FIELD = styled(Field)`\n  width: 80%;\n`;\nconst BUTTON = styled(Button)`\n  width: 80%;\n  variant: contained;\n`;\nconst TomatoButton = styled.button`\n  color: tomato;\n  border-color: tomato;\n  width: 80%;\n`;\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      substitutes: []\n    };\n  }\n\n  componentDidMount() {\n    this.liffInit();\n  }\n\n  liffInit() {\n    liff.init(data => {\n      const userId = data.context.userId;\n      const accessToken = liff.getAccessToken();\n      const URL_CHECKEXIST = \"https://us-central1-teddybear-dev.cloudfunctions.net/api/staff/checkExist\";\n      const body = {\n        userId: userId\n      };\n      fetch(URL_CHECKEXIST, {\n        method: 'post',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: _JSON$stringify(body)\n      }).then(res => {\n        return res.text();\n      }).then(result => {\n        if (result) {\n          alert(\"liffInit\");\n          this.lineAuth(userId, accessToken);\n        } else {\n          alert(\"請登入以查看假單\");\n          window.location.replace(\"https://teddybear-dev.firebaseapp.com/signIn\");\n        }\n      });\n    }, err => {\n      alert(\"error\");\n    });\n  }\n\n  lineAuth(userId, accessToken) {\n    const url = \"https://us-central1-teddybear-dev.cloudfunctions.net/api/staff/lineAuth\";\n    const body = {\n      userId: userId,\n      accessToken: accessToken\n    };\n    fetch(url, {\n      method: 'post',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: _JSON$stringify(body)\n    }).then(res => {\n      return res.json();\n    }).then(result => {\n      if (result) {\n        alert(\"lineAuth\");\n        alert(\"department \" + result.staff.department);\n        const ubn = result.staff.ubn;\n        const department = result.staff.department;\n        const idToken = result.token.idToken;\n        this.getSubstitutes(ubn, department, idToken);\n      } else {\n        alert(\"lineAuth no result\");\n      }\n    }).catch(function (error) {\n      alert(error.message);\n    });\n  }\n\n  getSubstitutes(ubn, department, idToken) {\n    const URL_GETSUBSTITUTES = \"https://us-central1-teddybear-dev.cloudfunctions.net/api/staff/getSubstitutes\";\n    const url = URL_GETSUBSTITUTES + `?ubn=${ubn}&query=department&value=${department}`;\n    const header = {\n      Authorization: idToken\n    };\n    alert(url); //document.write(idToken);\n\n    fetch(url, {\n      method: 'get',\n      headers: header\n    }).then(res => {\n      return res.json();\n    }).then(result => {\n      if (result) {\n        alert(\"getSubstitutes\");\n        this.createOptions(result.list);\n      } else {\n        alert(\"getSubstitutes no result\");\n      }\n    }).catch(function (error) {\n      alert(error.message);\n    });\n  }\n\n  createOptions(arr) {\n    for (var i = 0; i < arr.length; i++) {\n      var obj = arr[i];\n      obj.email = obj.value;\n      obj.name = obj.label;\n      delete obj.email;\n      delete obj.name; //push to list\n\n      var newList = [];\n      newList.push(obj);\n    } // tell Basic that options have been changed\n    //substitutes = newList;\n\n\n    this.setState({\n      substitutes: newList\n    });\n  }\n\n  render() {\n    return __jsx(BOX, null, __jsx(Head, null, __jsx(\"script\", {\n      src: \"https://d.line-scdn.net/liff/1.0/sdk.js\"\n    })), __jsx(\"body\", {\n      style: {\n        background: '#34495E'\n      }\n    }, __jsx(BOX, null, __jsx(Formik, {\n      initialValues: {\n        startDate: '',\n        endDate: '',\n        leaveType: '',\n        leaveReason: ' ',\n        substitute: ' '\n      },\n      validate: values => {\n        const errors = {}; // check for ubn\n\n        if (!values.startDate) {\n          errors.startDate = 'Required';\n        } // check for email\n\n\n        if (!values.endDate) {\n          errors.endDate = 'Required';\n        } // check for leaveType\n\n\n        if (!values.leaveType) {\n          errors.leaveType = 'Required';\n        } // check for leaveReason\n\n\n        if (!values.leaveReason) {\n          errors.leaveReason = 'Required';\n        } // check for substitute\n\n\n        if (!values.substitute) {\n          errors.substitute = 'Required';\n        }\n\n        return errors;\n      },\n      onSubmit: (values, {\n        setSubmitting\n      }) => {\n        //submitForm(values, userId);\n        setTimeout(() => {\n          submitForm(values, userId);\n          setSubmitting(false);\n        }, 400); //console.log('submitting', values);\n        //setSubmitting(false);\n      }\n    }, ({\n      isSubmitting,\n      values,\n      setFieldValue\n    }) => __jsx(CONTAINER, null, __jsx(MYFORM, null, __jsx(DatePicker, {\n      selected: values.startDate,\n      dateFormat: \"MMMM d, yyyy\",\n      className: \"form-control\",\n      name: \"startDate\",\n      label: \"\\u958B\\u59CB\\u65E5\\u671F\",\n      onChange: date => setFieldValue('startDate', date)\n    }), __jsx(DatePicker, {\n      selected: values.endDate,\n      dateFormat: \"MMMM d, yyyy\",\n      className: \"form-control\",\n      name: \"endDate\",\n      label: \"\\u7D50\\u675F\\u65E5\\u671F\",\n      onChange: date => setFieldValue('endDate', date)\n    }), __jsx(FIELD, {\n      type: \"leaveType\",\n      name: \"leaveType\",\n      label: \"\\u5047\\u52E4\\u985E\\u5225\",\n      component: TextField\n    }), __jsx(FIELD, {\n      type: \"leaveReason\",\n      name: \"leaveReason\",\n      label: \"\\u5047\\u52E4\\u4E8B\\u7531\",\n      component: TextField\n    }), __jsx(FIELD, {\n      type: \"substitute\",\n      name: \"substitute\",\n      label: \"\\u8077\\u52D9\\u4EE3\\u7406\\u4EBA\",\n      component: TextField\n    }), __jsx(Field, {\n      required: true,\n      name: \"substitute\",\n      label: \"\\u8077\\u52D9\\u4EE3\\u7406\\u4EBA\",\n      options: this.state.substitutes,\n      component: Select\n    }), __jsx(\"br\", null), __jsx(\"br\", null), __jsx(BUTTON, {\n      type: \"submit\",\n      fontFamily: \"Candara\",\n      variant: \"contained\",\n      color: \"secondary\",\n      disabled: isSubmitting\n    }, \"\\u9001\\u51FA\\u5047\\u55AE\")))))));\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}